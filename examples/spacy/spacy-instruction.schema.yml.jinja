schema:
  $schema: https://json-schema.org/draft/2020-12/schema
  $id: https://github.com/instructions-d-installation/installation-instruction/examples/spacy/schema_spacy.yml
  title: Spacy Install Schema
  description: This is a schema which is used for constructing interactive installation instructions.
  type: object
  $comment: by Kanushka Gupta
  properties: 
    os:
      title: Operating System
      description: Specify your Operating System
      enum:
        - mac
        - windows
        - linux
      default: windows

    platform:
      title: Platform
      description: platform
      enum:
        - x86
        - arm 
      default: x86

    package:
      title: Package Manager
      description: The package manager you use.
      enum:
        - pip
        - conda
        - source
      default: pip

    hardware:
      title: Hardware
      description: Hardware you want to use- CPU or GPU?
      enum:
        - cpu
        - gpu
      type: string
      default: cpu

    configuration:
      title: Configuration
      description: the configuration you have
      enum:
        - virtual env
        - train_models
      default: virtual env
    
  trained_pipelines: 
    title: Trained Pipelines
    description: the language package you want to include
    type: array
    items: 
      type: string
      enum: 
        - Catalan
        - Chinese
        - Croatian 
        - Danish
        - Dutch
        - English
        - Finnish
        - French
        - German 
        - Greek
        - Italian 
        - Japanese
        - Korean 
        - Lithuanian
        - Macedonian
        - Multi-language
        - Norwegian Bokm√•l
        - Polish
        - Portuguese
        - Romanian
        - Russian
        - Slovenian
        - Spanish 
        - Swedish
        - Ukrainian
  allOf:      
    - if:
        properties:
          trained_pipelines:
            minLength: 1
      then: 
        properties:   
          pipeline: 
            title: Select pipeline for
            description: Select pipeline for -
            enum: 
              - efficiency
              - accuracy
            type: string
            default: efficiency

    - if:
        properties:
          hardware:
            const: gpu
      then:
        properties:
          cuda_runtime:
            enum:
              - CUDA 8.0
              - CUDA 9.0
              - CUDA 9.1
              - CUDA 9.2
              - CUDA 10.0
              - CUDA 10.1
              - CUDA 10.2
              - CUDA 11.0
              - CUDA 11.1
              - CUDA 11.2 - 11.x
              - CUDA 12.x
            
  required: [
    "os",
    "platform",
    "package",
    "hardware",
    "configuration"
  ]

pretty:
  mac: macOs/OSX
  windows: Windows
  linux: Linux
  x86: x86
  arm: ARM/M1
  pip: Pip
  conda: Conda
  cpu: CPU
  gpu: GPU
  virtual env: virtual env
  train_models: train models
  efficiency: efficiency
  accuracy: accuracy

------
{% macro raise(error) %}
    {{ None['[ERROR] ' ~ error][0] }}
{% endmacro %}

{% macro generate_installation_command(os, platform, package, hardware, configuration, trained_pipelines, pipeline, cuda_runtime) %}
# Installation Command
pip install -U pip setuptools wheel
pip install -U spacy
{% if package == "pip" %}
pip install -U spacy
{% if configuration == 'train_models' %}
pip install -U 'spacy[transformers,lookups]'
{% endif %}
{% if trained_pipelines %}
{% for pipeline in trained_pipelines %}
python -m spacy download {{ pipeline.lower().replace(" ", "_") }}
{% endfor %}
{% endif %}
{% if hardware == 'gpu' %}
# Install CUDA runtime
{% if cuda_runtime %}
pip install cupy-cuda{{ cuda_runtime.split(' ')[1].replace('.', '') }}
{% endif %}
{% endif %}
{% elif package == "conda" %}
conda install -c conda-forge spacy
{% if trained_pipelines %}
{% for pipeline in trained_pipelines %}
python -m spacy download {{ pipeline.lower().replace(" ", "_") }}
{% endfor %}
{% endif %}
{% if hardware == 'gpu' %}
# Install CUDA runtime
{% if cuda_runtime %}
conda install -c conda-forge cupy-cuda{{ cuda_runtime.split(' ')[1].replace('.', '') }}
{% endif %}
{% endif %}
{% else %}
{{ raise("Unsupported package manager!") }}
{% endif %}
{% endmacro %}

{{ generate_installation_command(os, platform, package, hardware, configuration, trained_pipelines, pipeline, cuda_runtime) }}
