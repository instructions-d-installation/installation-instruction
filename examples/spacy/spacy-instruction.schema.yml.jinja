schema:
  $schema: https://json-schema.org/draft/2020-12/schema
  $id: https://github.com/instructions-d-installation/installation-instruction/examples/spacy/schema_spacy.yml
  title: Spacy Installation Schema
  description: This is a schema for constructing interactive installation instructions for the python package spacy by Kanushka Gupta
  type: object
  properties:
    os:
      title: Operating System
      description: Specify your Operating System
      enum:
        - mac
        - windows
        - linux
      default: windows

    platform:
      title: Platform
      description: platform
      enum:
        - x86
        - arm 
      default: x86

    package:
      title: Package Manager
      description: The package manager you use.
      enum:
        - pip
        - conda
        - source
      default: pip

    hardware:
      title: Hardware
      description: Hardware you want to use - CPU or GPU?
      enum:
        - cpu
        - gpu
      type: string
      default: cpu

    configuration:
      title: Configuration
      description: the configuration you have
      enum:
        - virtual-env
        - train-models
      default: virtual-env
    
    trained-pipelines: 
      title: Trained Pipelines
      description: The language package you want to include
      type: array
      items:
        type: string
        enum: 
          - Catalan
          - Chinese
          - Croatian 
          - Danish
          - Dutch
          - English
          - Finnish
          - French
          - German 
          - Greek
          - Italian 
          - Japanese
          - Korean 
          - Lithuanian
          - Macedonian
          - Multi-language
          - Norwegian Bokmål
          - Polish
          - Portuguese
          - Romanian
          - Russian
          - Slovenian
          - Spanish 
          - Swedish
          - Ukrainian
      unevaluatedItems: false
      default: []
  allOf:      
    - if:
        properties:
          trained_pipelines:
            minItems: 1
      then: 
        properties:   
          pipeline: 
            title: Select pipeline for
            description: Select pipeline for -
            enum: 
              - efficiency
              - accuracy
            type: string
            default: efficiency

    - if:
        properties:
          hardware:
            const: gpu
      then:
        properties:
          cuda_runtime:
            enum:
              - CUDA 8.0
              - CUDA 9.0
              - CUDA 9.1
              - CUDA 9.2
              - CUDA 10.0
              - CUDA 10.1
              - CUDA 10.2
              - CUDA 11.0
              - CUDA 11.1
              - CUDA 11.2 - 11.x
              - CUDA 12.x
              
  required: 
    - os
    - platform
    - package
    - hardware

pretty:
  mac: macOs/OSX
  windows: Windows
  linux: Linux
  x86: x86
  arm: ARM/M1
  pip: Pip
  conda: Conda
  cpu: CPU
  gpu: GPU
  virtual_env: virtual env
  train_models: train models
  efficiency: efficiency
  accuracy: accuracy

---------
{% macro trained_pipeline_command (os, platform, package, pipeline)  %}
  {% for tp in trained_pipelines %}
    {% if pipeline == "efficiency" %}
      {% if tp == "Catalan" %}
        python -m spacy download ca_core_news_sm &&
      {% elif tp == "Chinese" %}
        python -m spacy download zh_core_web_sm &&
      {% elif tp == "Croatian" %}
        python -m spacy download hr_core_news_sm &&
      {% elif tp == "Danish" %}
        python -m spacy download da_core_news_sm &&
      {% elif tp == "Dutch" %}
        python -m spacy download nl_core_news_sm &&
      {% elif tp == "English" %}
        python -m spacy download en_core_web_sm &&
      {% elif tp == "Finnish" %}
        python -m spacy download fi_core_news_sm &&
      {% elif tp == "French" %}
        python -m spacy download fr_core_news_sm &&
      {% elif tp == "German" %}
        python -m spacy download de_core_news_sm &&
      {% elif tp == "Greek" %}
        python -m spacy download el_core_news_sm &&
      {% elif tp == "Italian" %}
        python -m spacy download it_core_news_sm &&
      {% elif tp == "Japanese" %}
        python -m spacy download ja_core_web_sm &&
      {% elif tp == "Korean" %}
        python -m spacy download ko_core_web_sm &&
      {% elif tp == "Lithuanian" %}
        python -m spacy download lt_core_news_sm &&
      {% elif tp == "Macedonian" %}
        python -m spacy download mk_core_news_sm &&
      {% elif tp == "Multi-language" %}
        python -m spacy download xx_ent_wiki_sm &&
      {% elif tp == "Norwegian Bokmål" %}
        python -m spacy download nb_core_news_sm &&
      {% elif tp == "Polish" %}
        python -m spacy download pl_core_news_sm &&
      {% elif tp == "Portuguese" %}
        python -m spacy download pt_core_news_sm &&
      {% elif tp == "Romanian" %}
        python -m spacy download ro_core_news_sm &&
      {% elif tp == "Russian" %}
        python -m spacy download ru_core_news_sm &&
      {% elif tp == "Slovenian" %}
        python -m spacy download sl_core_news_sm &&
      {% elif tp == "Spanish" %}
        python -m spacy download es_core_news_sm &&
      {% elif tp == "Swedish" %}
        python -m spacy download sv_core_news_sm &&
      {% elif tp == "Ukrainian" %}
        python -m spacy download uk_core_news_sm &&
      {% endif %}
    {% elif pipeline == "accuracy" %}
      {% if tp == "Catalan" %}
        python -m spacy download ca_core_news_trf &&
      {% elif tp == "Chinese" %}
        python -m spacy download zh_core_web_trf &&
      {% elif tp == "Croatian" %}
        python -m spacy download hr_core_news_lg &&
      {% elif tp == "Danish" %}
        python -m spacy download da_core_news_trf &&
      {% elif tp == "Dutch" %}
        python -m spacy download nl_core_news_lg &&
      {% elif tp == "English" %}
        python -m spacy download en_core_web_trf &&
      {% elif tp == "Finnish" %}
        python -m spacy download fi_core_news_lg &&
      {% elif tp == "French" %}
        python -m spacy download fr_core_news_trf &&
      {% elif tp == "German" %}
        python -m spacy download de_core_news_trf &&
      {% elif tp == "Greek" %}
        python -m spacy download el_core_news_lg &&
      {% elif tp == "Italian" %}
        python -m spacy download it_core_news_lg &&
      {% elif tp == "Japanese" %}
        python -m spacy download ja_core_news_trf &&
      {% elif tp == "Korean" %}
        python -m spacy download ko_core_news_lg &&
      {% elif tp == "Lithuanian" %}
        python -m spacy download lt_core_news_lg &&
      {% elif tp == "Macedonian" %}
        python -m spacy download mk_core_news_lg &&
      {% elif tp == "Multi-language" %}
        python -m spacy download xx_ent_wiki_sm &&
      {% elif tp == "Norwegian Bokmål" %}
        python -m spacy download nb_core_news_lg &&
      {% elif tp == "Polish" %}
        python -m spacy download pl_core_news_lg &&
      {% elif tp == "Portuguese" %}
        python -m spacy download pt_core_news_lg &&
      {% elif tp == "Romanian" %}
        python -m spacy download ro_core_news_lg &&
      {% elif tp == "Russian" %}
        python -m spacy download ru_core_news_lg &&
      {% elif tp == "Slovenian" %}
        python -m spacy download sl_core_news_trf &&
      {% elif tp == "Spanish" %}
        python -m spacy download es_core_news_trf &&
      {% elif tp == "Swedish" %}
        python -m spacy download sv_core_news_lg &&
      {% elif tp == "Ukrainian" %}
        python -m spacy download uk_core_news_trf &&
      {% endif %}
    {% endif %}
  {% endfor %}
{% endmacro %}

{% macro cuda_runtime_command(cuda_version) %}
  {% if cuda_version == "CUDA 8.0" %}
    pip install cupy-cuda80 &&
  {% elif cuda_version == "CUDA 9.0" %}
    pip install cupy-cuda90 &&
  {% elif cuda_version == "CUDA 9.1" %}
    pip install cupy-cuda91 &&
  {% elif cuda_version == "CUDA 9.2" %}
    pip install cupy-cuda92 &&
  {% elif cuda_version == "CUDA 10.0" %}
    pip install cupy-cuda100 &&
  {% elif cuda_version == "CUDA 10.1" %}
    pip install cupy-cuda101 &&
  {% elif cuda_version == "CUDA 10.2" %}
    pip install cupy-cuda102 &&
  {% elif cuda_version == "CUDA 11.0" %}
    pip install cupy-cuda110 &&
  {% elif cuda_version == "CUDA 11.1" %}
    pip install cupy-cuda111 &&
  {% elif cuda_version.startswith("CUDA 11.2") %}
    pip install cupy-cuda112 &&
  {% elif cuda_version.startswith("CUDA 12") %}
    pip install cupy-cuda12x &&
  {% else %}
    echo "Unsupported CUDA version: {{ cuda_version }}" &&
  {% endif %}
{% endmacro %}

{% macro virtual_env_command(os, platform, package)  %}
  {% if configuration == "virtual-env" %}
    {% if package == "pip" %}
      python -m venv .env &&
      {% if os == "windows" %}
        .env\\Scripts\\activate &&
      {% else %}
        source .env/bin/activate &&
      {% endif %}
    {% elif package == "conda" %}
      conda create -n venv -y &&
      conda activate venv &&
    {% elif package == "source" %}
      python -m venv .env &&
      {% if os == "windows" %}
        .env\\Scripts\\activate &&
      {% else %}
        source .env/bin/activate &&
      {% endif %}
    {% endif %}
  {% elif configuration == "train-models" %}
    {% if package == "pip" %}
      pip install transformers lookups &&
    {% elif package == "conda" %}
      conda install -c conda-forge spacy-transformers -y &&
      # packages only available via pip &&
      pip install spacy-lookups-data &&
    {% elif package == "source" %}
      pip install transformers lookups &&
    {% endif %}
  {% endif %}
{% endmacro %}

{% if package == "pip" %}
  {% if configuration %}
    {{ virtual_env_command(os, platform, package) }}
  {% endif %}

  pip install -U pip setuptools wheel &&
  pip install -U spacy &&

  {% if trained_pipelines | length > 0 %}
    {{ trained_pipeline_command(os, platform, package, pipeline) }}
  {% endif %}

  {% if hardware == "cpu" %}
    {% if os == "mac" and platform == "arm" %}
      pip install spacy[apple] &&
    {% endif %}
  {% elif hardware == "gpu" %}
    {{ cuda_runtime_command(cuda_runtime) }}
    {% if platform == "arm" and os == "mac" %}
      pip install spacy[apple] &&
    {% endif %}
  {% endif %}

  # Finalize installation
  echo "Spacy installation completed successfully."

{% elif package == "conda" %}

  {% if configuration %}
    {{ virtual_env_command(os, platform, package) }}
  {% endif %}

  conda install -c conda-forge spacy -y &&

  {% if trained_pipelines | length > 0 %}
    {{ trained_pipeline_command(os, platform, package, pipeline) }}
  {% endif %}

  {% if hardware == "gpu" %}
    {{ cuda_runtime_command(cuda_runtime) }}
    conda install -c conda-forge cupy -y &&
  {% endif %}

  # Finalize installation
  echo "Spacy installation completed successfully."

{% elif package == "source" %}

  {% if configuration %}
    {{ virtual_env_command(os, platform, package) }}
  {% endif %}

  pip install -U pip setuptools wheel &&
  git clone https://github.com/explosion/spaCy &&
  cd spaCy &&
  pip install -r requirements.txt &&
  pip install --no-build-isolation --editable . &&

  {% if trained_pipelines | length > 0 %}
    {{ trained_pipeline_command(os, platform, package, pipeline) }}
  {% endif %}
    
  {% if hardware == "gpu" %}
    {% if platform == "x86" %}
      {{ cuda_runtime_command(cuda_runtime) }}
    {% elif platform == "arm" %}
      {% if os == "windows" %}
        echo "GPU support on ARM Windows is not supported." &&
      {% elif os == "linux" %}
        {{ cuda_runtime_command(cuda_runtime) }}
      {% elif os == "mac" %}
        echo "GPU support on ARM macOS requires Apple-specific configurations." &&
      {% endif %}
    {% endif %}
  {% endif %}

  # Finalize installation
  echo "Spacy installation from source completed successfully."

{% endif %}
